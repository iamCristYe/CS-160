exports.handler = function (event, context, callback) => {

    const done = (err, res) => callback(null, {
        statusCode: err ? '400' : '200',
        body: err ? err.message : JSON.stringify(res),
        headers: {
            'Access-Control-Allow-Headers': 'x-Requested-With',
            'Access-Control-Allow-Origin': '*',
            "Access-Control-Allow-Credentials" : true,
            'Content-Type': 'application/json',
        },
    });

    if (event.httpMethod) {
        switch (event.httpMethod) {
        case 'GET':
            dynamo.scan({ TableName: event.queryStringParameters.TableName }, done);
            break;
        case 'POST':
            var json = JSON.parse(event.body);
            if (json["type"] == 'POST') {
                dynamo.putItem(json["data"], done);
            }
            else if (json["type"] == 'PUT') {
                dynamo.updateItem(json["data"], done);
            }
            else if (json["type"] == 'DELETE') {
                dynamo.deleteItem(json["data"], done);
            }
            else if (json["type"] == 'QUERY') {
                dynamo.scan(json["data"], done);
            } else{
                done(new Error(`Unsupported method "${json["type"]}"`))
            }
            break;
        default:
            done(new Error(`Unsupported method "${event.httpMethod}"`));
        }
    } else {
        if (event.session.new) {
            onSessionStarted({requestId: event.request.requestId}, event.session);
        }

        if (event.request.type === "LaunchRequest") {
            onLaunch(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "IntentRequest") {
            onIntent(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "SessionEndedRequest") {
            onSessionEnded(event.request, event.session);
            context.succeed();
        }
    }
};
